@inject IJSRuntime JsRuntime
@using BlazorWasm_PayPal_Demo_App.Service
@implements IDisposable
@inject NavigationManager NavigationManager
@inject PayPalService PayPalService
@inject IConfiguration Configuration


<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header text-white" style="background-color: #0070ba">
                    <h3 class="mb-0">PayPal Checkout</h3>
                </div>
                <div class="card-body">
                    @if (_loading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Initializing PayPal...</p>
                        </div>
                    }

                    @if (_error)
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <span>@_errorMessage</span>
                        </div>
                    }

                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="amount" @bind="_amount" min="1" step="0.01" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <input type="text" class="form-control" id="description" @bind="_description" placeholder="Payment for..." />
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" style="background-color: #0070ba"  @onclick="InitiatePayPalAsync" disabled="@_loading">
                            @if (_loading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            Initialize PayPal
                        </button>
                    </div>

                    @if (_paymentStatus != null)
                    {
                        <div class="alert @_statusAlertClass mt-3">
                            <i class="@_statusIconClass me-2"></i>
                            <span>@_paymentStatus</span>
                            @if (!string.IsNullOrEmpty(_orderId))
                            {
                                <div class="mt-2 small">Order ID: @_orderId</div>
                            }
                        </div>
                    }

                    <div id="paypal-button-container" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private decimal _amount = 10.00m;
    private string _description = "Demo Payment";
    private bool _loading = false;
    private bool _error = false;
    private string _errorMessage = string.Empty;
    private string? _paymentStatus = null;
    private string _statusAlertClass = string.Empty;
    private string _statusIconClass = string.Empty;
    private string _orderId = string.Empty;
    private DotNetObjectReference<PayPalDemo>? _dotNetReference;

    /// <summary>
    /// Initialize the DotNetObjectReference to pass to PayPal Javascript
    /// </summary>
    protected override Task OnInitializedAsync()
    {
        _dotNetReference = DotNetObjectReference.Create(this);
        return base.OnInitializedAsync();   
    }

    private async Task InitiatePayPalAsync()
    {
        try
        {
            _loading = true;
            _error = false;
            _paymentStatus = null;
            StateHasChanged();

            string clientId = Configuration["PayPal:ClientId"] ?? throw new ArgumentNullException("PayPal:ClientId");
            string baseUrl = new Uri(NavigationManager.BaseUri).ToString();

            await JsRuntime.InvokeVoidAsync("paypalFunctions.loadPayPalScript", _dotNetReference, clientId, _amount, "USD", _description, baseUrl).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Failed to initialize PayPal: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task<OrderResponse> CreateOrderAsync(PaymentOrderRequest orderRequest)
    {
        try
        {
            return await PayPalService.CreateOrderAsync(orderRequest).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = $"Failed to create order: {ex.Message}";
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            throw;
        }
    }

    [JSInvokable]
    public async void OnPaymentApproved(string orderId)
    {
        _paymentStatus = "Payment completed successfully!";
        _statusAlertClass = "alert-success";
        _statusIconClass = "bi bi-check-circle-fill";
        _orderId = orderId;

        // call CaptureOrderAsync
        await PayPalService.CaptureOrderAsync(orderId).ConfigureAwait(false);   

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    [JSInvokable]
    public void OnPaymentCancelled()
    {
        _paymentStatus = "Payment was cancelled.";
        _statusAlertClass = "alert-warning";
        _statusIconClass = "bi bi-exclamation-circle-fill";
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void OnPaymentError(string errorMessage)
    {
        _paymentStatus = $"Payment failed: {errorMessage}";
        _statusAlertClass = "alert-danger";
        _statusIconClass = "bi bi-x-circle-fill";
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _dotNetReference?.Dispose();
    }
}